{"version":3,"sources":["components/Home.js","components/Quiz.js","components/Question.js","components/Results.js","actions/questions.js","components/QuizContainer.js","App.js","reducers/quiz.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["Home","react","className","Link","to","style","textDecoration","type","class","Quiz","props","questions","points","getNumber","reset","length","color","onClick","config","angle","spread","startVelocity","elementCount","decay","Question","disabled","correctAnswer","wrongAnswer","handleClick","question","src","imgUrl","alt","correct_answer","confetti_default","a","active","answers","map","answer","key","id","name","loadQuestion","QuizContainer","state","shuffleAnswers","_this","answersArray","sort","Math","random","_this$props","indexOf","event","_this$props2","addPoints","showBackgroundColor","target","innerText","setState","setTimeout","waitForAnswer","Array","from","document","getElementsByClassName","backgroundColor","borderColor","_this$props3","finishedQuiz","nextQuestion","currentIndex","_this$props4","this","shuffleQuestions","_this$props5","finished","_this$state","react_default","createElement","Results_Quiz","React","Component","connect","quiz","currentQuestion","questionsArray","payload","index","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","Redirect","initialState","reducer","arguments","undefined","action","Object","objectSpread","combineReducers","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","ReduxThunk","store","createStore","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cf1b9c5.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\n\nexport default function Home() {\n  return (\n    <div className=\"container text-center my-auto\">\n      <h1 className=\"quiz-title my-4\">ART QUIZ</h1>\n      <Link to=\"/quiz\" style={{ textDecoration: 'none' }}> <button type=\"button\" class=\"btn btn-danger btn-lg\">Play Â»</button></Link>\n    </div>)\n}","import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\n\nexport default function Quiz(props) {\n  const { questions, points, getNumber, reset } = props\n  return (\n  <div className=\"row text-center border-bottom align-items-center\">\n    <div className=\"col-md\">\n      <h2>question {getNumber()} of {questions.length}</h2>\n    </div>\n    <div className=\"col-md-6\">\n      <Link to=\"/\" style={{color: 'black', textDecoration: 'none' }} ><h1 className=\"small-title display-2\" onClick={reset}>Art Quiz</h1></Link>\n    </div>\n    <div className=\"col-md\">\n      <h2>score: {points} points</h2>\n    </div>\n  </div>)\n}\n\n\n","import * as React from 'react'\nimport Confetti from 'react-dom-confetti';\n\n// Controls confetti settings\nconst config = {\n  angle: 90,\n  spread: 154,\n  startVelocity: 45,\n  elementCount: 200,\n  decay: 0.88\n};\n\nexport default function Question(props) {\n  const { disabled, correctAnswer, wrongAnswer, handleClick, question } = props\n  return (\n  <div className=\"question\">\n    <div className=\"question-container text-center\">\n      <h3>{question.question}</h3>\n    </div>\n    <div>\n      <div className=\"row\">\n        <div className=\"img-container col-sm-5 offset-sm-1\">\n          <img \n          className=\"img image-fluid mx-auto\" \n          src={question.imgUrl} \n          alt={question.question}\n          />\n        </div>\n        <div className=\"col-sm-5\">\n\n        {correctAnswer &&\n          <p class=\"text-success answerAlert\" >You're right! The answer is <strong>{question.correct_answer}</strong>.\n          </p>}\n\n        {wrongAnswer &&\n          <p class=\"wrong-answer answerAlert\" >Sorry, that's not correct. The right answer is <strong>{question.correct_answer}</strong>.\n          </p>}\n        \n          <Confetti \n            active={ correctAnswer }\n            config={ config }\n          />\n\n        {question.answers.map(answer => \n          <button \n            key={answer.id} \n            disabled={disabled} \n            className=\"answers shadow-sm\" \n            onClick={handleClick}>{answer.name}\n          </button>)}\n        \n        </div>\n      </div>\n    </div>\n      \n  </div>)\n}\n\n\n","import * as React from 'react'\nimport { Link } from 'react-router-dom'\n\n\nexport default function Quiz(props) {\n  const { questions, points, loadQuestion } = props\n  return (\n  <div className=\"text-center\">\n    <h2>You have scored {points} out of a total of {questions.length} points!</h2>\n\n    {points/questions.length <= 0.5 &&\n      <div>\n        <p>Frida would not approve!</p>\n        <img className=\"img-fluid\" src=\"https://media.giphy.com/media/gVJKzDaWKSETu/giphy.gif\" alt=\"Frida-Kahlo-does-not-approve\"/> \n      </div>}\n\n    {points/questions.length > 0.5 &&\n      <div>\n      <p>Well done! Here are some medieval monkeys playing musical instruments.</p>\n      <img className=\"gif mx-auto img-fluid\" src=\"https://media.giphy.com/media/3o6fJ8bcDsEs4SL8yY/giphy.gif\" alt=\"medieval-instruments-played-by-monkeys\"/> \n    </div>}\n\n    <Link to=\"/quiz\" style={{ textDecoration: 'none' }}><button type=\"button\" class=\" play-again btn btn-danger btn-lg mx-auto\" onClick={() => loadQuestion(questions)}>Play again Â»</button></Link>\n\n  </div>)\n}\n\n\n","export const LOAD_QUESTION = 'LOAD_QUESTION'\nexport const ADD_POINTS = 'ADD_POINTS'\nexport const NEXT_QUESTION = 'NEXT_QUESTION'\nexport const FINISHED_QUIZ ='FINISHED_QUIZ'\nexport const RESET = 'RESET'\n\n// Finds the first item in the questions array\nexport const loadQuestion = (questionsArray) => ({\n  type: LOAD_QUESTION,\n  payload: questionsArray[0]\n})\n\n// Adds one point when right answer is clicked\nexport const addPoints = () => ({\n  type: ADD_POINTS,\n  payload: 1\n})\n\n//Finds the next item in the questions array\nexport const nextQuestion = (questionsArray, index) => ({\n  type: NEXT_QUESTION,\n  payload: questionsArray[index +1]\n}) \n\n//Is fired when the last question is answered\nexport const finishedQuiz = () => ({\n  type: FINISHED_QUIZ,\n  payload: true\n})\n\n//Is fired when user clicks title in quiz\nexport const reset = () => ({\n  type: RESET\n})\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport Quiz from './Quiz'\nimport Question from './Question'\nimport Results from './Results'\nimport {loadQuestion, addPoints, nextQuestion, finishedQuiz, reset} from '../actions/questions'\n\nclass QuizContainer extends React.Component {\n  state = {\n    disabled: false,\n    correctAnswer: false,\n    wrongAnswer: false\n  }\n\n  // When the component is mounted, the questions and answers are shuffled.\n  // The first question in the shuffled array is shown.\n  componentDidMount() {\n    const {loadQuestion, questions} = this.props\n    this.shuffleQuestions()\n    this.shuffleAnswers()\n    loadQuestion(questions)\n  }\n\n  shuffleQuestions() {\n    this.props.questions.sort(() => 0.5 - Math.random())\n  }\n\n  // Finds the array of answers for every item in the questions array, and shufffles it. \n  shuffleAnswers = () => {\n    this.props.questions.map(question => {\n      const answersArray = question.answers\n\n      answersArray.sort(() => 0.5 - Math.random())\n      return answersArray\n    })\n  }\n\n  // This function looks for the index of the current question in the questions array, returns the index + 1\n  getNumber = () => {\n    const { question, questions } = this.props\n    const index = questions.indexOf(question)\n    return index + 1\n  }\n  \n  // handleClick fires when an answer is clicked. \n  // Displays the background of the right answer; \n  // Sets the local state to correct/wrong, depending on which answer is clicked.\n  // If the right answer is clicked, 1 point is added to redux state by the action addPoints.\n  // Sets a timeout in which the answer is displayed.\n  // After the timeout, the function waitForAnswer fires.\n\n  handleClick = (event) => {\n    const { question, addPoints} = this.props\n    this.showBackgroundColor()\n\n    if (event.target.innerText === question.correct_answer) {\n      addPoints()\n      this.setState({ disabled: true, correctAnswer: true})\n    } else {\n      this.setState({ disabled: true, wrongAnswer: true})\n    }\n    \n    setTimeout(this.waitForAnswer, 3000)\n    } \n  \n    showBackgroundColor = () => {\n      let answersArray = Array.from(document.getElementsByClassName(\"answers\"))\n\n      answersArray.map(answer => {\n        if (answer.innerText === this.props.question.correct_answer) {\n          answer.style.backgroundColor = \"#28A746\"\n          answer.style.borderColor = \"#28A746\"\n        }  \n      })\n    }\n\n  // Fires after timer ends. Resets the local state.\n  // Action nextQuestion (index of current question +1 ) or finishedquiz (displays resultspage) is fired. \n  waitForAnswer = () => {\n    const {questions, question, finishedQuiz, nextQuestion} = this.props\n    const currentIndex = questions.indexOf(question)\n\n    this.setState({disabled: false, wrongAnswer: false, correctAnswer: false })\n\n    if (currentIndex === questions.length-1) {\n      finishedQuiz()\n    } else {\n      nextQuestion(questions, currentIndex)\n    }\n  }\n\n  render() {\n    const { questions, question, points, loadQuestion, reset, finished } = this.props\n    const { disabled, correctAnswer, wrongAnswer } = this.state\n\n    return (\n    <div className=\"container shadow p-3 bg-white\">\n\n      {!finished && <Quiz \n        questions={questions}\n        points={points}\n        getNumber={this.getNumber}\n        reset={reset}\n      />}\n\n     {question !== null && !finished && <Question\n        question={question}\n        handleClick={this.handleClick}\n        disabled={disabled} \n        correctAnswer={correctAnswer}\n        wrongAnswer={wrongAnswer}\n        \n      />}\n      \n      {finished && <Results \n        questions={questions}\n        points={points}\n        loadQuestion={loadQuestion}\n      />}\n    \n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  questions: state.quiz.questions,\n  question: state.quiz.currentQuestion,\n  points: state.quiz.points,\n  finished: state.quiz.finishedQuiz\n})\n\nexport default connect(mapStateToProps, {loadQuestion, addPoints, nextQuestion, finishedQuiz, reset})(QuizContainer)","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport './App.css';\nimport Home from './components/Home'\nimport QuizContainer from './components/QuizContainer'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <header className=\"masthead d-flex\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/quiz\" component={QuizContainer} />\n            <Route component={() => (<Redirect to=\"/\" />)} />\n          </Switch>\n        </header>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import questions from '../lib/db.json'\nimport {LOAD_QUESTION, ADD_POINTS, NEXT_QUESTION, FINISHED_QUIZ, RESET} from '../actions/questions'\n\nconst initialState = { \n  questions,\n  points: 0,\n  currentQuestion: null,\n  finishedQuiz: false\n}\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case LOAD_QUESTION:\n      return {\n        ...state, \n        currentQuestion: action.payload,\n        finishedQuiz: false,\n        points: 0\n      }\n    \n    case ADD_POINTS:\n      return {\n        ...state,\n        points: state.points + action.payload\n      }\n    \n    case NEXT_QUESTION:\n      return {\n        ...state,\n        currentQuestion: action.payload\n      }\n\n    case FINISHED_QUIZ: \n      return {\n        ...state,\n        finishedQuiz: action.payload\n      }\n\n    case RESET:\n      return initialState\n\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { combineReducers } from 'redux'\nimport quiz from './quiz'\n\nexport default combineReducers({\n  quiz\n})","\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport reducer from './reducers'\nimport ReduxThunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(ReduxThunk)\n)\n\nconst store = createStore(reducer, enhancer)\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>, \n    document.getElementById('root')\n  )\nserviceWorker.unregister();\n"],"sourceRoot":""}